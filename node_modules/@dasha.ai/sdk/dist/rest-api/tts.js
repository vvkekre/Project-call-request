"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TtsApi = void 0;
const __1 = require("..");
const log_1 = require("../log");
const base = __importStar(require("./base"));
const api = __importStar(require("./generated/core/api"));
class TtsApi extends base.Api {
    constructor(account, log) {
        super(api.TtsApi, account, log);
    }
    async synthesize(request) {
        const response = await this.api.apiV1TtsSynthesisPost(request, {
            validateStatus: (status) => status < 400 || status === 404,
            responseType: "arraybuffer",
        });
        if (response.status === 404) {
            log_1.logAndThrow(this.log, new __1.errors.TtsNotFoundError(request.configName));
        }
        // TODO: how to tell the schema/code generators to return a proper type?
        return new Uint8Array(response.data);
    }
    async getSpeakers() {
        const response = await this.api.apiV1TtsSpeakersGet(undefined, undefined, {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
    async getSpeakerByName(speakerName) {
        const response = await this.api.apiV1TtsSpeakersNameGet(speakerName, {
            validateStatus: (status) => status < 400 || status === 404,
        });
        if (response.status === 404) {
            log_1.logAndThrow(this.log, new __1.errors.TtsSpeakerNotFoundError(speakerName));
        }
        return response.data;
    }
    async deleteSpeakerByName(speakerName) {
        const response = await this.api.apiV1TtsSpeakersNameDelete(speakerName, {
            validateStatus: (status) => status < 400 || status === 404,
        });
        if (response.status === 404) {
            log_1.logAndThrow(this.log, new __1.errors.TtsSpeakerNotFoundError(speakerName));
        }
    }
    async updateOrAddSpeakerByName(speakerName, voiceFileContent) {
        const response = await this.api.apiV1TtsSpeakersNamePost(speakerName, voiceFileContent, {
            validateStatus: (status) => status <= 400,
        });
        if (response.status === 400) {
            log_1.logAndThrow(this.log, new __1.errors.TtsSpeakerCloneWrongFile());
        }
        return response.data;
    }
}
exports.TtsApi = TtsApi;
//# sourceMappingURL=tts.js.map