"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TtsApi = exports.TtsApiFactory = exports.TtsApiFp = exports.TtsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * TtsApi - axios parameter creator
 * @export
 */
const TtsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsGet: async (names, skip, take, options = {}) => {
            const localVarPath = `/api/v1/tts/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            if (names) {
                localVarQueryParameter['names'] = names;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsIdGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1TtsGroupsIdGet', 'id', id);
            const localVarPath = `/api/v1/tts/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSpeakersGet: async (skip, take, options = {}) => {
            const localVarPath = `/api/v1/tts/speakers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSpeakersNameDelete: async (name, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('apiV1TtsSpeakersNameDelete', 'name', name);
            const localVarPath = `/api/v1/tts/speakers/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSpeakersNameGet: async (name, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('apiV1TtsSpeakersNameGet', 'name', name);
            const localVarPath = `/api/v1/tts/speakers/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} name
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSpeakersNamePost: async (name, body, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('apiV1TtsSpeakersNamePost', 'name', name);
            // verify required parameter 'body' is not null or undefined
            common_1.assertParamExists('apiV1TtsSpeakersNamePost', 'body', body);
            const localVarPath = `/api/v1/tts/speakers/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {TtsSynthesisRequestDTO} [ttsSynthesisRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSynthesisPost: async (ttsSynthesisRequestDTO, options = {}) => {
            const localVarPath = `/api/v1/tts/synthesis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ttsSynthesisRequestDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.TtsApiAxiosParamCreator = TtsApiAxiosParamCreator;
/**
 * TtsApi - functional programming interface
 * @export
 */
const TtsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.TtsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsGroupsGet(names, skip, take, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsGroupsGet(names, skip, take, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsGroupsIdGet(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsGroupsIdGet(id, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsSpeakersGet(skip, take, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsSpeakersGet(skip, take, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsSpeakersNameDelete(name, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsSpeakersNameDelete(name, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsSpeakersNameGet(name, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsSpeakersNameGet(name, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} name
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsSpeakersNamePost(name, body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsSpeakersNamePost(name, body, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {TtsSynthesisRequestDTO} [ttsSynthesisRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.TtsApiFp = TtsApiFp;
/**
 * TtsApi - factory interface
 * @export
 */
const TtsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.TtsApiFp(configuration);
    return {
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsGet(names, skip, take, options) {
            return localVarFp.apiV1TtsGroupsGet(names, skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsIdGet(id, options) {
            return localVarFp.apiV1TtsGroupsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSpeakersGet(skip, take, options) {
            return localVarFp.apiV1TtsSpeakersGet(skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSpeakersNameDelete(name, options) {
            return localVarFp.apiV1TtsSpeakersNameDelete(name, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSpeakersNameGet(name, options) {
            return localVarFp.apiV1TtsSpeakersNameGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} name
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSpeakersNamePost(name, body, options) {
            return localVarFp.apiV1TtsSpeakersNamePost(name, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TtsSynthesisRequestDTO} [ttsSynthesisRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options) {
            return localVarFp.apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TtsApiFactory = TtsApiFactory;
/**
 * TtsApi - object-oriented interface
 * @export
 * @class TtsApi
 * @extends {BaseAPI}
 */
class TtsApi extends base_1.BaseAPI {
    /**
     *
     * @param {Array<string>} [names]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsGroupsGet(names, skip, take, options) {
        return exports.TtsApiFp(this.configuration).apiV1TtsGroupsGet(names, skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsGroupsIdGet(id, options) {
        return exports.TtsApiFp(this.configuration).apiV1TtsGroupsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsSpeakersGet(skip, take, options) {
        return exports.TtsApiFp(this.configuration).apiV1TtsSpeakersGet(skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsSpeakersNameDelete(name, options) {
        return exports.TtsApiFp(this.configuration).apiV1TtsSpeakersNameDelete(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsSpeakersNameGet(name, options) {
        return exports.TtsApiFp(this.configuration).apiV1TtsSpeakersNameGet(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} name
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsSpeakersNamePost(name, body, options) {
        return exports.TtsApiFp(this.configuration).apiV1TtsSpeakersNamePost(name, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TtsSynthesisRequestDTO} [ttsSynthesisRequestDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options) {
        return exports.TtsApiFp(this.configuration).apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TtsApi = TtsApi;
//# sourceMappingURL=tts-api.js.map