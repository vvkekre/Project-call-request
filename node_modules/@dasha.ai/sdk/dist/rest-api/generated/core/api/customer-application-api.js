"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerApplicationApi = exports.CustomerApplicationApiFactory = exports.CustomerApplicationApiFp = exports.CustomerApplicationApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * CustomerApplicationApi - axios parameter creator
 * @export
 */
const CustomerApplicationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ApplicationsGet: async (skip, take, options = {}) => {
            const localVarPath = `/api/v1/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ApplicationsIdGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ApplicationsIdGet', 'id', id);
            const localVarPath = `/api/v1/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ApplicationsIdPackageGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ApplicationsIdPackageGet', 'id', id);
            const localVarPath = `/api/v1/applications/{id}/package`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CustomerApplicationApiAxiosParamCreator = CustomerApplicationApiAxiosParamCreator;
/**
 * CustomerApplicationApi - functional programming interface
 * @export
 */
const CustomerApplicationApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.CustomerApplicationApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApplicationsGet(skip, take, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ApplicationsGet(skip, take, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApplicationsIdGet(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ApplicationsIdGet(id, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApplicationsIdPackageGet(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ApplicationsIdPackageGet(id, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.CustomerApplicationApiFp = CustomerApplicationApiFp;
/**
 * CustomerApplicationApi - factory interface
 * @export
 */
const CustomerApplicationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.CustomerApplicationApiFp(configuration);
    return {
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ApplicationsGet(skip, take, options) {
            return localVarFp.apiV1ApplicationsGet(skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ApplicationsIdGet(id, options) {
            return localVarFp.apiV1ApplicationsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ApplicationsIdPackageGet(id, options) {
            return localVarFp.apiV1ApplicationsIdPackageGet(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CustomerApplicationApiFactory = CustomerApplicationApiFactory;
/**
 * CustomerApplicationApi - object-oriented interface
 * @export
 * @class CustomerApplicationApi
 * @extends {BaseAPI}
 */
class CustomerApplicationApi extends base_1.BaseAPI {
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApplicationApi
     */
    apiV1ApplicationsGet(skip, take, options) {
        return exports.CustomerApplicationApiFp(this.configuration).apiV1ApplicationsGet(skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApplicationApi
     */
    apiV1ApplicationsIdGet(id, options) {
        return exports.CustomerApplicationApiFp(this.configuration).apiV1ApplicationsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApplicationApi
     */
    apiV1ApplicationsIdPackageGet(id, options) {
        return exports.CustomerApplicationApiFp(this.configuration).apiV1ApplicationsIdPackageGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CustomerApplicationApi = CustomerApplicationApi;
//# sourceMappingURL=customer-application-api.js.map