"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Profiler API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfilerApi = exports.ProfilerApiFactory = exports.ProfilerApiFp = exports.ProfilerApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ProfilerApi - axios parameter creator
 * @export
 */
const ProfilerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} [start]
         * @param {string} [end]
         * @param {string} [applicationId]
         * @param {number} [clustersNumber]
         * @param {ClusterAlgorithmEnum} [clusterAlgorithm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilerDownloadGet: async (start, end, applicationId, clustersNumber, clusterAlgorithm, options = {}) => {
            const localVarPath = `/api/v1/profiler/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['Start'] = (start instanceof Date) ?
                    start.toISOString() :
                    start;
            }
            if (end !== undefined) {
                localVarQueryParameter['End'] = (end instanceof Date) ?
                    end.toISOString() :
                    end;
            }
            if (applicationId !== undefined) {
                localVarQueryParameter['ApplicationId'] = applicationId;
            }
            if (clustersNumber !== undefined) {
                localVarQueryParameter['ClustersNumber'] = clustersNumber;
            }
            if (clusterAlgorithm !== undefined) {
                localVarQueryParameter['ClusterAlgorithm'] = clusterAlgorithm;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ProfilerRequestDTO} profilerRequestDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilerRequestPost: async (profilerRequestDTO, options = {}) => {
            // verify required parameter 'profilerRequestDTO' is not null or undefined
            common_1.assertParamExists('apiV1ProfilerRequestPost', 'profilerRequestDTO', profilerRequestDTO);
            const localVarPath = `/api/v1/profiler/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(profilerRequestDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [start]
         * @param {string} [end]
         * @param {string} [applicationId]
         * @param {number} [clustersNumber]
         * @param {ClusterAlgorithmEnum} [clusterAlgorithm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilerStatusGet: async (start, end, applicationId, clustersNumber, clusterAlgorithm, options = {}) => {
            const localVarPath = `/api/v1/profiler/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            if (start !== undefined) {
                localVarQueryParameter['Start'] = (start instanceof Date) ?
                    start.toISOString() :
                    start;
            }
            if (end !== undefined) {
                localVarQueryParameter['End'] = (end instanceof Date) ?
                    end.toISOString() :
                    end;
            }
            if (applicationId !== undefined) {
                localVarQueryParameter['ApplicationId'] = applicationId;
            }
            if (clustersNumber !== undefined) {
                localVarQueryParameter['ClustersNumber'] = clustersNumber;
            }
            if (clusterAlgorithm !== undefined) {
                localVarQueryParameter['ClusterAlgorithm'] = clusterAlgorithm;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ProfilerApiAxiosParamCreator = ProfilerApiAxiosParamCreator;
/**
 * ProfilerApi - functional programming interface
 * @export
 */
const ProfilerApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ProfilerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} [start]
         * @param {string} [end]
         * @param {string} [applicationId]
         * @param {number} [clustersNumber]
         * @param {ClusterAlgorithmEnum} [clusterAlgorithm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProfilerDownloadGet(start, end, applicationId, clustersNumber, clusterAlgorithm, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProfilerDownloadGet(start, end, applicationId, clustersNumber, clusterAlgorithm, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {ProfilerRequestDTO} profilerRequestDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProfilerRequestPost(profilerRequestDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProfilerRequestPost(profilerRequestDTO, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} [start]
         * @param {string} [end]
         * @param {string} [applicationId]
         * @param {number} [clustersNumber]
         * @param {ClusterAlgorithmEnum} [clusterAlgorithm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProfilerStatusGet(start, end, applicationId, clustersNumber, clusterAlgorithm, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProfilerStatusGet(start, end, applicationId, clustersNumber, clusterAlgorithm, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.ProfilerApiFp = ProfilerApiFp;
/**
 * ProfilerApi - factory interface
 * @export
 */
const ProfilerApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ProfilerApiFp(configuration);
    return {
        /**
         *
         * @param {string} [start]
         * @param {string} [end]
         * @param {string} [applicationId]
         * @param {number} [clustersNumber]
         * @param {ClusterAlgorithmEnum} [clusterAlgorithm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilerDownloadGet(start, end, applicationId, clustersNumber, clusterAlgorithm, options) {
            return localVarFp.apiV1ProfilerDownloadGet(start, end, applicationId, clustersNumber, clusterAlgorithm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ProfilerRequestDTO} profilerRequestDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilerRequestPost(profilerRequestDTO, options) {
            return localVarFp.apiV1ProfilerRequestPost(profilerRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} [start]
         * @param {string} [end]
         * @param {string} [applicationId]
         * @param {number} [clustersNumber]
         * @param {ClusterAlgorithmEnum} [clusterAlgorithm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilerStatusGet(start, end, applicationId, clustersNumber, clusterAlgorithm, options) {
            return localVarFp.apiV1ProfilerStatusGet(start, end, applicationId, clustersNumber, clusterAlgorithm, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProfilerApiFactory = ProfilerApiFactory;
/**
 * ProfilerApi - object-oriented interface
 * @export
 * @class ProfilerApi
 * @extends {BaseAPI}
 */
class ProfilerApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} [start]
     * @param {string} [end]
     * @param {string} [applicationId]
     * @param {number} [clustersNumber]
     * @param {ClusterAlgorithmEnum} [clusterAlgorithm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilerApi
     */
    apiV1ProfilerDownloadGet(start, end, applicationId, clustersNumber, clusterAlgorithm, options) {
        return exports.ProfilerApiFp(this.configuration).apiV1ProfilerDownloadGet(start, end, applicationId, clustersNumber, clusterAlgorithm, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ProfilerRequestDTO} profilerRequestDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilerApi
     */
    apiV1ProfilerRequestPost(profilerRequestDTO, options) {
        return exports.ProfilerApiFp(this.configuration).apiV1ProfilerRequestPost(profilerRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} [start]
     * @param {string} [end]
     * @param {string} [applicationId]
     * @param {number} [clustersNumber]
     * @param {ClusterAlgorithmEnum} [clusterAlgorithm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilerApi
     */
    apiV1ProfilerStatusGet(start, end, applicationId, clustersNumber, clusterAlgorithm, options) {
        return exports.ProfilerApiFp(this.configuration).apiV1ProfilerStatusGet(start, end, applicationId, clustersNumber, clusterAlgorithm, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProfilerApi = ProfilerApi;
//# sourceMappingURL=profiler-api.js.map