"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SipOutboundApi = void 0;
const errors = __importStar(require("../errors"));
const log_1 = require("../log");
const base = __importStar(require("./base"));
const api = __importStar(require("./generated/core/api"));
class SipOutboundApi extends base.Api {
    constructor(account, log) {
        super(api.SIPOutboundApi, account, log);
    }
    async deleteConfig(name, options) {
        const getResponse = await this.api.apiV1SipOutboundByNameGet(name, {
            validateStatus: (status) => status < 400 || status === 404,
        });
        if (getResponse.status === 404) {
            if (!(options === null || options === void 0 ? void 0 : options.quiet))
                log_1.logAndThrow(this.log, new errors.SipConfigNotFoundError(name));
            return;
        }
        await this.api.apiV1SipOutboundIdDelete(getResponse.data.id, {
            validateStatus: (status) => status < 400,
        });
    }
    async createConfig(request) {
        const response = await this.api.apiV1SipOutboundPost(request, {
            validateStatus: (status) => status < 400 || status === 409,
        });
        if (response.status === 409) {
            log_1.logAndThrow(this.log, new errors.SipConfigExistsError(request.name));
        }
        return response.data;
    }
    async getConfigByName(name) {
        const response = await this.api.apiV1SipOutboundByNameGet(name, {
            validateStatus: (status) => status < 400 || status === 404,
        });
        if (response.status === 404) {
            log_1.logAndThrow(this.log, new errors.SipConfigNotFoundError(name));
        }
        return response.data;
    }
    async listConfigs() {
        const response = await this.api.apiV1SipOutboundGet(undefined, // skip
        undefined, // take
        {
            validateStatus: (status) => status < 400,
        });
        return response.data;
    }
    async updateConfig(name, request) {
        const getResponse = await this.api.apiV1SipOutboundByNameGet(name, {
            validateStatus: (status) => status < 400 || status === 404,
        });
        if (getResponse.status === 404) {
            log_1.logAndThrow(this.log, new errors.SipConfigNotFoundError(name));
        }
        const patchResponse = await this.api.apiV1SipOutboundIdPatch(getResponse.data.id, request, {
            validateStatus: (status) => status < 400,
        });
        return patchResponse.data;
    }
}
exports.SipOutboundApi = SipOutboundApi;
//# sourceMappingURL=sip-outbound.js.map