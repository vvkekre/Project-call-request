"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startTrial = exports.authorize = void 0;
const openid = __importStar(require("openid-client"));
const parseBody = __importStar(require("co-body"));
const proxy_agent_1 = __importDefault(require("proxy-agent"));
const querystring = __importStar(require("querystring"));
const rest = __importStar(require("./rest-api"));
const log_1 = require("./log");
async function authorize(options) {
    const { server, insecure, redirectUri, responseType, callback } = options;
    const log = log_1.log.child({ label: "auth", account: { server, insecure } });
    log.info(`authorizing on ${server}`);
    if (insecure)
        log.warn(`TLS is disabled`);
    const miscApi = new rest.MiscApi({ server, insecure, apiKey: "" }, log);
    const authServerUrl = await miscApi.getAuthServerUrl();
    // openid uses got, which does not support *_PROXY env vars natively
    // https://github.com/sindresorhus/got/issues/560
    const customHttpOptions = (opts) => ({
        ...opts,
        agent: { http: new proxy_agent_1.default(), https: new proxy_agent_1.default() },
    });
    // we need to override the Issuer static http options without modifying global state
    const issuer = await openid.Issuer.discover.call({ ...openid.Issuer, [openid.custom.http_options]: customHttpOptions }, authServerUrl);
    issuer[openid.custom.http_options] = customHttpOptions;
    const client = new issuer.Client({ client_id: "platform_client" });
    client[openid.custom.http_options] = customHttpOptions;
    const nonce = openid.generators.nonce();
    const authUrl = client.authorizationUrl({
        scope: "platform_api",
        response_type: "token",
        redirect_uri: redirectUri,
        prompt: "login",
        response_mode: responseType === "form" ? "form_post" : undefined,
        nonce,
    });
    const callbackResult = await callback(authUrl);
    let parameters = {};
    if (responseType === "form" && typeof callbackResult !== "string") {
        parameters = await parseBody.form(callbackResult);
    }
    if (responseType === "fragment" && typeof callbackResult === "string") {
        parameters = querystring.parse(callbackResult.slice(1));
    }
    const tokenSet = await client.callback(redirectUri, parameters, {
        response_type: "token",
        nonce,
    });
    return {
        server,
        insecure,
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        apiKey: tokenSet.access_token,
    };
}
exports.authorize = authorize;
// TODO: do we have free trial docs?
/**
 * Get a new free trial API key.
 *
 * @param options.server an endpoint to use for Dasha APIs
 * @param options.insecure whether to user non-TLS-encrypted connections
 */
async function startTrial(options) {
    const { server, insecure } = options;
    const log = log_1.log.child({ label: "auth", account: { server, insecure } });
    log.info(`requesting trial key from ${server}`);
    if (insecure)
        log.warn(`TLS is disabled`);
    const miscApi = new rest.MiscApi({ server, insecure, apiKey: "" }, log);
    const { apiKey } = await miscApi.startTrial();
    return { server, insecure, apiKey };
}
exports.startTrial = startTrial;
//# sourceMappingURL=auth.js.map