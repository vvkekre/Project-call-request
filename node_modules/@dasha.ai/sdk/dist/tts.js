"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addOrUpdateCustomSpeakerByName = exports.deleteCustomSpeakerByName = exports.getCustomSpeakerByName = exports.getCustomSpeakers = exports.synthesize = exports._makeTtsSessionConfig = void 0;
const account_1 = require("./account");
const log_1 = require("./log");
const rest = __importStar(require("./rest-api"));
function _toConfigName(providerName, log) {
    switch (providerName) {
        case "default":
            return "Default";
        case "custom":
            return "ExternalClient";
        case "dasha":
            return "Dasha";
        case "dasha-emotional":
            return "dasha-emotional";
        case "voice-cloning":
            return "voice-cloning";
        default:
            // fallback for providers not defined by the current SDK version
            log.warn(`unknown tts provider name: ${providerName}`);
            return providerName;
    }
}
/** @internal */
function _makeTtsSessionConfig(providerName, log) {
    return { type: "synthesized", configName: _toConfigName(providerName, log) };
}
exports._makeTtsSessionConfig = _makeTtsSessionConfig;
async function synthesize(text, voice, options) {
    var _a;
    const account = (_a = options.account) !== null && _a !== void 0 ? _a : (await account_1._getEffectiveAccount({ _log: log_1.log }));
    const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
    const api = new rest.TtsApi(account, log);
    const data = await api.synthesize({
        text,
        voiceInfo: voice,
        configName: _toConfigName(options.providerName, log),
    });
    return data;
}
exports.synthesize = synthesize;
function mapSpeaker(speaker) {
    return {
        name: speaker.name,
        createdTime: new Date(speaker.createdTime),
        lastUpdatedTime: new Date(speaker.lastUpdatedTime),
    };
}
async function getCustomSpeakers(options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await account_1._getEffectiveAccount({ _log: log_1.log }));
    const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
    const api = new rest.TtsApi(account, log);
    const response = await api.getSpeakers();
    return response.map((x) => mapSpeaker(x));
}
exports.getCustomSpeakers = getCustomSpeakers;
async function getCustomSpeakerByName(name, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await account_1._getEffectiveAccount({ _log: log_1.log }));
    const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
    const api = new rest.TtsApi(account, log);
    const response = await api.getSpeakerByName(name);
    return mapSpeaker(response);
}
exports.getCustomSpeakerByName = getCustomSpeakerByName;
async function deleteCustomSpeakerByName(name, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await account_1._getEffectiveAccount({ _log: log_1.log }));
    const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
    const api = new rest.TtsApi(account, log);
    await api.deleteSpeakerByName(name);
}
exports.deleteCustomSpeakerByName = deleteCustomSpeakerByName;
async function addOrUpdateCustomSpeakerByName(name, voiceFileContent, options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await account_1._getEffectiveAccount({ _log: log_1.log }));
    const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
    const api = new rest.TtsApi(account, log);
    const response = await api.updateOrAddSpeakerByName(name, voiceFileContent);
    return mapSpeaker(response);
}
exports.addOrUpdateCustomSpeakerByName = addOrUpdateCustomSpeakerByName;
//# sourceMappingURL=tts.js.map