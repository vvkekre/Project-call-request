"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCustomerInfo = void 0;
const account_1 = require("./account");
const log_1 = require("./log");
const rest = __importStar(require("./rest-api"));
/**
 * Get information about current logged-in user
 */
async function getCustomerInfo(options) {
    var _a;
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (await account_1._getEffectiveAccount({ _log: log_1.log }));
    const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
    const api = new rest.CustomerApi(account, log);
    const info = await api.getMe();
    return { server: account.server, id: info.id, name: info.name, maxConcurrency: info.maxConcurrency };
}
exports.getCustomerInfo = getCustomerInfo;
//# sourceMappingURL=customer.js.map