{"version":3,"file":"transport.js","sourceRoot":"","sources":["../src/transport.ts"],"names":[],"mappings":";;;AAAA,2DAAuC;AACvC,mDAAsD;AACtD,2CAAoC;AAEpC,IAAM,kBAAkB,GAAoB;IAC1C,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK;IAC5B,OAAO,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK;IAC9B,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI;IAC1B,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK;IAC5B,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,OAAO;IAC7B,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK;CAC7B,CAAC;AAWF;IAA4B,yCAAK;IAC/B,uBAAY,IAAS;QAArB,YACE,kBAAM,IAAI,CAAC,OAAO,CAAC,SAMpB;QAJC,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,OAAO,CAAC;QACjC,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;SACzB;;IACH,CAAC;IACH,oBAAC;AAAD,CAAC,AATD,CAA4B,KAAK,GAShC;AAED;IAA6C,2CAAe;IAK1D,yBAAmB,IAA6B;QAAhD,YACE,kBAAM,IAAI,CAAC,SAKZ;QAVM,YAAM,GAAG,KAAK,CAAC;QAEd,eAAS,GAAG,EAAE,CAAC;QAoEf,kBAAY,GAAG,UAAC,OAAyB;YAC/C,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,kBAAkB,CAAC;aAC3B;YAED,IAAM,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CACjD,UAAC,GAA2B,EAAE,eAAuB;gBACnD,GAAG,CAAC,eAAe,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC5E,OAAO,GAAG,CAAC;YACb,CAAC,EACD,EAAE,CACH,CAAC;YAEF,6CACK,kBAAkB,GAClB,eAAe,EAClB;QACJ,CAAC,CAAC;QAhFA,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;QAC3D,KAAI,CAAC,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC;QAC3C,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC;;IACvE,CAAC;IAEM,6BAAG,GAAV,UAAW,IAAS,EAAE,QAAoB;QAA1C,iBA8CC;QA7CC,YAAY,CAAC;YACX,KAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,MAAM;YAAE,OAAO,QAAQ,EAAE,CAAC;QAE3B,IAAA,sBAAO,EAAE,kBAAK,EAAE,gBAAI,EAAE,gBAAI,EAAE,iEAAO,CAAU;QACrD,IAAM,YAAY,GAAG,IAAI,CAAC,mBAAK,CAAC,CAAC;QAEjC,IAAM,WAAW,GAAI,IAAI,CAAC,SAAiB,CAAC,YAAY,CAAC,CAAC;QAE1D,MAAM,CAAC,cAAc,CAAC,UAAA,KAAK;YACzB,IAAI,IAAI,KAAK,SAAS,IAAI,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACxD,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACrB;YAED,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAEtB,IAAI,IAAI,KAAK,SAAS,IAAI,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACxD,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACrB;YAED,yBAAyB;YACzB,mFAAmF;YAEnF,iBAAiB;QACnB,CAAC,CAAC,CAAC;QAEH,wBAAwB;QACxB,yBAAyB;QACzB,8BAA8B;QAC9B,WAAW;QACX,MAAM;QAEN,gCAAgC;QAChC,IAAI,eAAe,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE;YACnD,IAAM,KAAK,GAAG,OAAO,YAAY,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;YAC3E,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAE/B,OAAO,QAAQ,EAAE,CAAC;SACnB;QAED,qBAAqB;QACrB,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAC5C,OAAO,QAAQ,EAAE,CAAC;IACpB,CAAC;IAED,6BAAG,GAAH;QAAA,iBAIC;QAJG,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QAChB,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC;YAClB,iBAAM,GAAG,+BAAI,IAAI,GAAE;QACrB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sBAAW,mCAAM;aAAjB;YACE,OAAO,MAAM,CAAC;QAChB,CAAC;;;OAAA;IAqBc,4BAAY,GAA3B,UAA4B,OAA2B;QACrD,6CACK,OAAO,KACV,GAAG,EAAE,OAAO,IAAI,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,EAAE,EAC3D,UAAU,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU,IAAI,+BAA+B,EAC5E,WAAW,EAAE,OAAO,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,YAAY,EACrH,KAAK,EAAE,OAAO,IAAI,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,KAAK,EACtE,UAAU,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU,IAAI,GAAG,EAChD,cAAc,EAAE,OAAO,IAAI,OAAO,CAAC,cAAc,IAAI,GAAG,IACxD;IACJ,CAAC;IAED,uCAAuC;IACvC,mDAAmD;IACnD,IAAI;IAEW,wBAAQ,GAAvB,UAAyB,GAAQ;QAC/B,IAAM,IAAI,GAAG,OAAO,GAAG,CAAC;QACxB,OAAO,IAAI,KAAK,UAAU,IAAI,IAAI,KAAK,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC;IAC3D,CAAC;IAEc,kCAAkB,GAAjC,UAAkC,KAAsB;QACtD,OAAO,KAAK,KAAK,MAAM,CAAC,QAAQ,CAAC,KAAK,IAAI,KAAK,KAAK,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC5E,CAAC;IACH,sBAAC;AAAD,CAAC,AAlHD,CAA6C,eAAe,GAkH3D;;AAAA,CAAC","sourcesContent":["import * as Sentry from '@sentry/node';\nimport TransportStream = require(\"winston-transport\");\nimport { LEVEL } from 'triple-beam';\n\nconst DEFAULT_LEVELS_MAP: SeverityOptions = {\n  silly: Sentry.Severity.Debug,\n  verbose: Sentry.Severity.Debug,\n  info: Sentry.Severity.Info,\n  debug: Sentry.Severity.Debug,\n  warn: Sentry.Severity.Warning,\n  error: Sentry.Severity.Error,\n};\n\nexport interface SentryTransportOptions extends TransportStream.TransportStreamOptions {\n  sentry?: Sentry.NodeOptions;\n  levelsMap?: SeverityOptions;\n}\n\ninterface SeverityOptions {\n  [key: string]: Sentry.Severity;\n}\n\nclass ExtendedError extends Error {\n  constructor(info: any) {\n    super(info.message);\n\n    this.name = info.name || \"Error\";\n    if (info.stack) {\n      this.stack = info.stack;\n    }\n  }\n}\n\nexport default class SentryTransport extends TransportStream {\n  public silent = false;\n\n  private levelsMap = {};\n\n  public constructor(opts?: SentryTransportOptions) {\n    super(opts);\n\n    this.levelsMap = this.setLevelsMap(opts && opts.levelsMap);\n    this.silent = opts && opts.silent || false;\n    Sentry.init(SentryTransport.withDefaults(opts && opts.sentry || {}));\n  }\n\n  public log(info: any, callback: () => void) {\n    setImmediate(() => {\n      this.emit('logged', info);\n    });\n\n    if (this.silent) return callback();\n\n    const { message, level, tags, user, ...meta } = info;\n    const winstonLevel = info[LEVEL];\n\n    const sentryLevel = (this.levelsMap as any)[winstonLevel];\n\n    Sentry.configureScope(scope => {\n      if (tags !== undefined && SentryTransport.isObject(tags)) {\n        scope.setTags(tags);\n      }\n\n      scope.setExtras(meta);\n\n      if (user !== undefined && SentryTransport.isObject(user)) {\n        scope.setUser(user);\n      }\n\n      // TODO: add fingerprints\n      // scope.setFingerprint(['{{ default }}', path]); // fingerprint should be an array\n\n      // scope.clear();\n    });\n\n    // TODO: add breadcrumbs\n    // Sentry.addBreadcrumb({\n    //   message: 'My Breadcrumb',\n    //   // ...\n    // });\n\n    // Capturing Errors / Exceptions\n    if (SentryTransport.shouldLogException(sentryLevel)) {\n      const error = message instanceof Error ? message : new ExtendedError(info);\n      Sentry.captureException(error);\n\n      return callback();\n    }\n\n    // Capturing Messages\n    Sentry.captureMessage(message, sentryLevel);\n    return callback();\n  }\n\n  end(...args: any[]) {\n    Sentry.flush().then(() => {\n      super.end(...args);\n    });\n  }\n\n  public get sentry() {\n    return Sentry;\n  }\n\n  private setLevelsMap = (options?: SeverityOptions): SeverityOptions => {\n    if (!options) {\n      return DEFAULT_LEVELS_MAP;\n    }\n\n    const customLevelsMap = Object.keys(options).reduce(\n      (acc: { [key: string]: any }, winstonSeverity: string) => {\n        acc[winstonSeverity] = Sentry.Severity.fromString(options[winstonSeverity]);\n        return acc;\n      },\n      {}\n    );\n\n    return {\n      ...DEFAULT_LEVELS_MAP,\n      ...customLevelsMap,\n    };\n  };\n\n  private static withDefaults(options: Sentry.NodeOptions) {\n    return {\n      ...options,\n      dsn: options && options.dsn || process.env.SENTRY_DSN || '',\n      serverName: options && options.serverName || 'winston-transport-sentry-node',\n      environment: options && options.environment || process.env.SENTRY_ENVIRONMENT || process.env.NODE_ENV || 'production',\n      debug: options && options.debug || !!process.env.SENTRY_DEBUG || false,\n      sampleRate: options && options.sampleRate || 1.0,\n      maxBreadcrumbs: options && options.maxBreadcrumbs || 100\n    };\n  }\n\n  // private normalizeMessage(msg: any) {\n  //   return msg && msg.message ? msg.message : msg;\n  // }\n\n  private static isObject (obj: any) {\n    const type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  }\n\n  private static shouldLogException(level: Sentry.Severity) {\n    return level === Sentry.Severity.Fatal || level === Sentry.Severity.Error;\n  }\n};\n"]}