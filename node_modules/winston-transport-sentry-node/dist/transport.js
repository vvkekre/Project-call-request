"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Sentry = tslib_1.__importStar(require("@sentry/node"));
var TransportStream = require("winston-transport");
var triple_beam_1 = require("triple-beam");
var DEFAULT_LEVELS_MAP = {
    silly: Sentry.Severity.Debug,
    verbose: Sentry.Severity.Debug,
    info: Sentry.Severity.Info,
    debug: Sentry.Severity.Debug,
    warn: Sentry.Severity.Warning,
    error: Sentry.Severity.Error,
};
var ExtendedError = /** @class */ (function (_super) {
    tslib_1.__extends(ExtendedError, _super);
    function ExtendedError(info) {
        var _this = _super.call(this, info.message) || this;
        _this.name = info.name || "Error";
        if (info.stack) {
            _this.stack = info.stack;
        }
        return _this;
    }
    return ExtendedError;
}(Error));
var SentryTransport = /** @class */ (function (_super) {
    tslib_1.__extends(SentryTransport, _super);
    function SentryTransport(opts) {
        var _this = _super.call(this, opts) || this;
        _this.silent = false;
        _this.levelsMap = {};
        _this.setLevelsMap = function (options) {
            if (!options) {
                return DEFAULT_LEVELS_MAP;
            }
            var customLevelsMap = Object.keys(options).reduce(function (acc, winstonSeverity) {
                acc[winstonSeverity] = Sentry.Severity.fromString(options[winstonSeverity]);
                return acc;
            }, {});
            return tslib_1.__assign(tslib_1.__assign({}, DEFAULT_LEVELS_MAP), customLevelsMap);
        };
        _this.levelsMap = _this.setLevelsMap(opts && opts.levelsMap);
        _this.silent = opts && opts.silent || false;
        Sentry.init(SentryTransport.withDefaults(opts && opts.sentry || {}));
        return _this;
    }
    SentryTransport.prototype.log = function (info, callback) {
        var _this = this;
        setImmediate(function () {
            _this.emit('logged', info);
        });
        if (this.silent)
            return callback();
        var message = info.message, level = info.level, tags = info.tags, user = info.user, meta = tslib_1.__rest(info, ["message", "level", "tags", "user"]);
        var winstonLevel = info[triple_beam_1.LEVEL];
        var sentryLevel = this.levelsMap[winstonLevel];
        Sentry.configureScope(function (scope) {
            if (tags !== undefined && SentryTransport.isObject(tags)) {
                scope.setTags(tags);
            }
            scope.setExtras(meta);
            if (user !== undefined && SentryTransport.isObject(user)) {
                scope.setUser(user);
            }
            // TODO: add fingerprints
            // scope.setFingerprint(['{{ default }}', path]); // fingerprint should be an array
            // scope.clear();
        });
        // TODO: add breadcrumbs
        // Sentry.addBreadcrumb({
        //   message: 'My Breadcrumb',
        //   // ...
        // });
        // Capturing Errors / Exceptions
        if (SentryTransport.shouldLogException(sentryLevel)) {
            var error = message instanceof Error ? message : new ExtendedError(info);
            Sentry.captureException(error);
            return callback();
        }
        // Capturing Messages
        Sentry.captureMessage(message, sentryLevel);
        return callback();
    };
    SentryTransport.prototype.end = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        Sentry.flush().then(function () {
            _super.prototype.end.apply(_this, tslib_1.__spread(args));
        });
    };
    Object.defineProperty(SentryTransport.prototype, "sentry", {
        get: function () {
            return Sentry;
        },
        enumerable: true,
        configurable: true
    });
    SentryTransport.withDefaults = function (options) {
        return tslib_1.__assign(tslib_1.__assign({}, options), { dsn: options && options.dsn || process.env.SENTRY_DSN || '', serverName: options && options.serverName || 'winston-transport-sentry-node', environment: options && options.environment || process.env.SENTRY_ENVIRONMENT || process.env.NODE_ENV || 'production', debug: options && options.debug || !!process.env.SENTRY_DEBUG || false, sampleRate: options && options.sampleRate || 1.0, maxBreadcrumbs: options && options.maxBreadcrumbs || 100 });
    };
    // private normalizeMessage(msg: any) {
    //   return msg && msg.message ? msg.message : msg;
    // }
    SentryTransport.isObject = function (obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
    };
    SentryTransport.shouldLogException = function (level) {
        return level === Sentry.Severity.Fatal || level === Sentry.Severity.Error;
    };
    return SentryTransport;
}(TransportStream));
exports.default = SentryTransport;
;
//# sourceMappingURL=transport.js.map